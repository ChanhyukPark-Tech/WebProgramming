/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {forwardRef} from 'react'
import {useGLTF} from '@react-three/drei'
import {useLoader} from "@react-three/fiber";
import {TextureLoader} from "three";
import FloorBodyColorMap from "../images/map/floorbodyMap/Bullstreet2_floorbody_BaseColor.png";
import FloorBodyNormalMap from "../images/map/floorbodyMap/Bullstreet2_floorbody_Normal.png";
import FloorBodyEmissiveMap from "../images/map/floorbodyMap/Bullstreet2_floorbody_Emissive.png";
import FloorBodyHeightMap from "../images/map/floorbodyMap/Bullstreet2_floorbody_Height.png";
import FloorBodyMetallicMap from "../images/map/floorbodyMap/Bullstreet2_floorbody_Metallic.png";
import FloorBodyRoughnessMap from "../images/map/floorbodyMap/Bullstreet2_floorbody_Roughness.png";
import FloorSideColorMap from "../images/map/floorsideMap/Bullstreet2_floorsidebar_BaseColor.png";
import FloorSideNormalMap from "../images/map/floorsideMap/Bullstreet2_floorsidebar_Normal.png";
import FloorSideEmissiveMap from "../images/map/floorsideMap/Bullstreet2_floorsidebar_Emissive.png";
import FloorSideHeightMap from "../images/map/floorsideMap/Bullstreet2_floorsidebar_Height.png";
import FloorSideMetallicMap from "../images/map/floorsideMap/Bullstreet2_floorsidebar_Metallic.png";
import FloorSideRoughnessMap from "../images/map/floorsideMap/Bullstreet2_floorsidebar_Roughness.png";
import HornBodyColorMap from "../images/map/hornbodyMap/Bullstreet2_bullhornBody_BaseColor.png";
import HornBodyNormalMap from "../images/map/hornbodyMap/Bullstreet2_bullhornBody_Normal.png";
import HornBodyEmissiveMap from "../images/map/hornbodyMap/Bullstreet2_bullhornBody_Emissive.png";
import HornBodyHeightMap from "../images/map/hornbodyMap/Bullstreet2_bullhornBody_Height.png";
import HornBodyMetallicMap from "../images/map/hornbodyMap/Bullstreet2_bullhornBody_Metallic.png";
import HornBodyRoughnessMap from "../images/map/hornbodyMap/Bullstreet2_bullhornBody_Roughness.png";

const getTexture = (original, MapArray, bumpScale) => {
    original.map = MapArray[0];

    original.normalMap = MapArray[1];
    original.bumpMap = MapArray[3];
    original.emissiveMap = MapArray[2];
    original.metalnessMap = MapArray[4];
    original.roughnessMap = MapArray[5];
    original.map.flipY = false;
    original.normalMap.flipY = false;
    original.emissiveMap.flipY = false;
    original.bumpMap.flipY = false;
    original.metalnessMap.flipY = false;
    original.roughnessMap.flipY = false;
    original.normalMapType = 2;
    original.roughness = 2
    original.bumpScale = bumpScale
    return original
}
const Model = forwardRef((props, ref) => {
    const {nodes, materials} = useGLTF('/Bullstreet2.glb')

    const floorBodyTextureArray = useLoader(
        TextureLoader,
        [FloorBodyColorMap, FloorBodyNormalMap, FloorBodyEmissiveMap, FloorBodyHeightMap, FloorBodyMetallicMap, FloorBodyRoughnessMap]
    )
    const floorSideTextureArray = useLoader(
        TextureLoader,
        [FloorSideColorMap, FloorSideNormalMap, FloorSideEmissiveMap, FloorSideHeightMap, FloorSideMetallicMap, FloorSideRoughnessMap]
    )
    const hornBodyTextureArray = useLoader(
        TextureLoader,
        [HornBodyColorMap, HornBodyNormalMap, HornBodyEmissiveMap, HornBodyHeightMap, HornBodyMetallicMap, HornBodyRoughnessMap]
    )
    const myFloorBody = getTexture(materials.floorbody, floorBodyTextureArray, 0.4)
    const myFloorSide = getTexture(materials.floorsidebar, floorSideTextureArray, 0.4)
    const myHornBody = getTexture(materials.bullhornBody, hornBodyTextureArray, 0.02)

    return (
        <>
            <group {...props} dispose={null}
                   position={[0, -2, -1561]}
                   rotation={[0, Math.PI / 2, 0]}>
                <group position={[-2.98, 0, 0]} scale={0.23}>
                    <mesh geometry={nodes.Cube024.geometry} material={myHornBody}/>
                    <group ref={ref}>
                    <mesh geometry={nodes.Cube024_1.geometry} material={materials.hornemission}/>
                    <mesh geometry={nodes.Cube024_3.geometry}
                          material={materials.flooremission}/>
                    </group>
                    <mesh geometry={nodes.Cube024_2.geometry} material={myFloorBody}/>

                    <mesh geometry={nodes.Cube024_4.geometry} material={myFloorSide}/>
                </group>
            </group>
        </>
    )
})
export default Model;
useGLTF.preload('/Bullstreet2.glb')
